/* Generated By:JavaCC: Do not edit this line. Frodo.java */
package com.bpreece.lotr;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Frodo implements FrodoConstants {
    private static final Map<String, Object> defines = new HashMap<String, Object>();

    public static void main(String args[])
        throws ParseException
    {
        try {
            if (args.length < 1) {
                System.err.println("Usage:  frodo <script> [ <infile> [ <outfile> ] ]");
            }
            Frodo frodo = new Frodo(new FileReader(args[0]));

            Reader in = new InputStreamReader(System.in);
            if (args.length > 1) {
                in = new BufferedReader(new FileReader(args[1]));
            }

            PrintStream out = System.out;
            if (args.length > 2) {
                out = new PrintStream(new FileOutputStream(args[2]));
            }

            ASN.Script frodoScript = frodo.Script();
            LOTR lotr = new LOTR(readLines(in));
            frodoScript.execute(lotr);
            writeLines(out, lotr.getLines());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private static List<String> readLines(Reader in)
        throws IOException
    {
        List<String> lines = new ArrayList<String>();
        BufferedReader reader = new BufferedReader(in);
        String line = null;
        while ((line = reader.readLine()) != null) {
            lines.add(line);
        }
        return lines;
    }

    private static void writeLines(PrintStream out, List<String> lines) {
        for (String line : lines) {
            out.println(line);
        }
    }

    private static String unescape(String input) {
        input = input.substring(1, input.length()-1);
        StringBuilder buffer = new StringBuilder();
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (c == '\u005c\u005c') {
                c = input.charAt(++i);
                switch (c) {
                case 't': buffer.append('\u005ct'); break;
                case 'b': buffer.append('\u005cb'); break;
                case 'f': buffer.append('\u005cf'); break;
                case 'r': buffer.append('\u005cr'); break;
                case 'n': buffer.append('\u005cn'); break;
                default:  buffer.append(c); break;
                }
            } else {
                buffer.append(c);
            }
        }
        return buffer.toString();
    }

    private static final HashMap<String, ASN.TConstant> definedValues =
        new HashMap<String, ASN.TConstant>();

    private static void define(String id, ASN.TConstant value) {
        definedValues.put(id, value);
    }

    private static ASN.TConstant lookup(String id)
        throws ParseException
    {
        if (definedValues.containsKey(id)) {
            return definedValues.get(id);
        } else {
            throw new ParseException("Undefined id " + id);
        }
    }

    private static ASN.TConstant lookup(String id, Class valueClass)
        throws ParseException
    {
        if (definedValues.containsKey(id)) {
            ASN.TConstant value = definedValues.get(id);
            if (value.getClass().equals(valueClass)) {
                return value;
            } else {
                throw new ParseException(id + value.getClass() + " != " + valueClass);
            }
        } else {
            throw new ParseException("Undefined id " + id);
        }
    }

    private final LOTR lotr = new LOTR(new ArrayList<String>());

    public Frodo() { }

  static final public ASN.Script Script() throws ParseException {
    ASN.Command command;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      Definition();
    }
    command = Disjunction();
                             {if (true) return new ASN.Script(command);}
    throw new Error("Missing return statement in function");
  }

  static final public ASN.TConstant Literal() throws ParseException {
    Token t;
    if (jj_2_2(3)) {
      t = jj_consume_token(T_STRING);
                     {if (true) return new ASN.TString(unescape(token.image));}
    } else if (jj_2_3(3)) {
      t = jj_consume_token(T_REGEX);
                    {if (true) return new ASN.TRegex(unescape(token.image));}
    } else if (jj_2_4(3)) {
      t = jj_consume_token(T_FORMAT);
                     {if (true) return new ASN.TFormat(unescape(token.image));}
    } else if (jj_2_5(3)) {
      t = jj_consume_token(T_INTEGER);
                      {if (true) return new ASN.TInteger(Long.parseLong(token.image));}
    } else if (jj_2_6(3)) {
      t = jj_consume_token(T_FLOAT);
                    {if (true) return new ASN.TFloat(Double.parseDouble(token.image));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Definition() throws ParseException {
    Token id;
    ASN.TConstant constant;
    jj_consume_token(T_DEFINE);
    id = jj_consume_token(T_ID);
    constant = Literal();
                                                  define(id.image, constant);
  }

  static final public ASN.TConstant Constant() throws ParseException {
    Token t;
    if (jj_2_7(3)) {
      t = jj_consume_token(T_STRING);
                     {if (true) return new ASN.TString(unescape(t.image));}
    } else if (jj_2_8(3)) {
      t = jj_consume_token(T_REGEX);
                    {if (true) return new ASN.TRegex(unescape(t.image));}
    } else if (jj_2_9(3)) {
      t = jj_consume_token(T_FORMAT);
                     {if (true) return new ASN.TFormat(unescape(t.image));}
    } else if (jj_2_10(3)) {
      t = jj_consume_token(T_INTEGER);
                      {if (true) return new ASN.TInteger(Long.parseLong(t.image));}
    } else if (jj_2_11(3)) {
      t = jj_consume_token(T_FLOAT);
                    {if (true) return new ASN.TFloat(Double.parseDouble(t.image));}
    } else if (jj_2_12(3)) {
      t = jj_consume_token(T_ID);
                 {if (true) return lookup(t.image);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.TString String() throws ParseException {
    Token t;
    if (jj_2_13(3)) {
      t = jj_consume_token(T_STRING);
                     {if (true) return new ASN.TString(unescape(t.image));}
    } else if (jj_2_14(3)) {
      t = jj_consume_token(T_ID);
                 {if (true) return (ASN.TString)lookup(t.image, ASN.TString.class);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.TRegex Regex() throws ParseException {
    Token t;
    if (jj_2_15(3)) {
      t = jj_consume_token(T_REGEX);
                    {if (true) return new ASN.TRegex(unescape(t.image));}
    } else if (jj_2_16(3)) {
      t = jj_consume_token(T_ID);
                 {if (true) return (ASN.TRegex)lookup(t.image, ASN.TRegex.class);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.TFormat Format() throws ParseException {
    Token t;
    if (jj_2_17(3)) {
      t = jj_consume_token(T_FORMAT);
                     {if (true) return new ASN.TFormat(unescape(t.image));}
    } else if (jj_2_18(3)) {
      t = jj_consume_token(T_ID);
                 {if (true) return (ASN.TFormat)lookup(t.image, ASN.TFormat.class);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.TInteger Integer() throws ParseException {
    Token t;
    if (jj_2_19(3)) {
      t = jj_consume_token(T_INTEGER);
                      {if (true) return new ASN.TInteger(Long.parseLong(t.image));}
    } else if (jj_2_20(3)) {
      t = jj_consume_token(T_ID);
                 {if (true) return (ASN.TInteger)lookup(t.image, ASN.TInteger.class);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.TFloat Float() throws ParseException {
    Token t;
    if (jj_2_21(3)) {
      t = jj_consume_token(T_FLOAT);
                    {if (true) return new ASN.TFloat(Double.parseDouble(t.image));}
    } else if (jj_2_22(3)) {
      t = jj_consume_token(T_ID);
                 {if (true) return (ASN.TFloat)lookup(t.image, ASN.TFloat.class);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.Command Command() throws ParseException {
    ASN.Command command;
    if (jj_2_23(3)) {
      command = Directive();
                            {if (true) return command;}
    } else if (jj_2_24(3)) {
      command = WhileCommand();
                               {if (true) return command;}
    } else if (jj_2_25(3)) {
      command = CompoundCommand();
                                  {if (true) return command;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASN.Disjunction CompoundCommand() throws ParseException {
    ASN.Disjunction command;
    jj_consume_token(T_START);
    command = Disjunction();
    jj_consume_token(T_END);
                                                {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

  static final public ASN.While WhileCommand() throws ParseException {
    ASN.Command command;
    jj_consume_token(T_WHILE);
    command = Command();
                                    {if (true) return new ASN.While(command);}
    throw new Error("Missing return statement in function");
  }

  static final public ASN.Disjunction Disjunction() throws ParseException {
    ASN.Disjunction command = new ASN.Disjunction();
    ASN.Command next;
    next = Sequence();
                        command.add(next);
    label_2:
    while (true) {
      if (jj_2_26(3)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(T_ELSE);
      next = Sequence();
                                      command.add(next);
    }
      {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

  static final public ASN.Sequence Sequence() throws ParseException {
    ASN.Sequence command = new ASN.Sequence();
    ASN.Command next;
    label_3:
    while (true) {
      if (jj_2_27(3)) {
        ;
      } else {
        break label_3;
      }
      next = Command();
                           command.add(next);
    }
      {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

/*
 */
  static final public ASN.Directive Directive() throws ParseException {
    ASN.TConstant x, y;
    ASN.TString s;
    ASN.TRegex r;
    ASN.TFormat f;
    ASN.TInteger n;
    if (jj_2_28(3)) {
      jj_consume_token(T_ABORT);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_ABORT, x);}
    } else if (jj_2_29(3)) {
      jj_consume_token(T_ABORT);
      {if (true) return new ASN.Directive(FrodoConstants.T_ABORT);}
    } else if (jj_2_30(3)) {
      jj_consume_token(T_LOG);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_LOG, x);}
    } else if (jj_2_31(3)) {
      jj_consume_token(T_FAIL);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_FAIL, x);}
    } else if (jj_2_32(3)) {
      jj_consume_token(T_FAIL);
      {if (true) return new ASN.Directive(FrodoConstants.T_FAIL);}
    } else if (jj_2_33(3)) {
      jj_consume_token(T_RESET);
      {if (true) return new ASN.Directive(FrodoConstants.T_RESET);}
    } else if (jj_2_34(3)) {
      jj_consume_token(T_EMPTY);
      {if (true) return new ASN.Directive(FrodoConstants.T_EMPTY);}
    } else if (jj_2_35(3)) {
      jj_consume_token(T_EQUALS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_EQUALS, s);}
    } else if (jj_2_36(3)) {
      jj_consume_token(T_STARTS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_STARTS, s);}
    } else if (jj_2_37(3)) {
      jj_consume_token(T_ENDS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_ENDS, s);}
    } else if (jj_2_38(3)) {
      jj_consume_token(T_CONTAINS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_CONTAINS, s);}
    } else if (jj_2_39(3)) {
      jj_consume_token(T_RANGE_RESET);
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE_RESET);}
    } else if (jj_2_40(3)) {
      jj_consume_token(T_RANGE);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE, x);}
    } else if (jj_2_41(3)) {
      jj_consume_token(T_RANGE_EMPTY);
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE_EMPTY);}
    } else if (jj_2_42(3)) {
      jj_consume_token(T_RANGE_STARTS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE_STARTS, s);}
    } else if (jj_2_43(3)) {
      jj_consume_token(T_RANGE_ENDS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE_ENDS, s);}
    } else if (jj_2_44(3)) {
      jj_consume_token(T_RANGE_CONTAINS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE_CONTAINS, s);}
    } else if (jj_2_45(3)) {
      jj_consume_token(T_RANGE_ADJUST);
      n = Integer();
      {if (true) return new ASN.Directive(FrodoConstants.T_RANGE_ADJUST, n);}
    } else if (jj_2_46(3)) {
      jj_consume_token(T_NEXT);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_NEXT, x);}
    } else if (jj_2_47(3)) {
      jj_consume_token(T_NEXT);
      {if (true) return new ASN.Directive(FrodoConstants.T_NEXT);}
    } else if (jj_2_48(3)) {
      jj_consume_token(T_NEXT_EMPTY);
      {if (true) return new ASN.Directive(FrodoConstants.T_NEXT_EMPTY);}
    } else if (jj_2_49(3)) {
      jj_consume_token(T_NEXT_STARTS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_NEXT_STARTS, s);}
    } else if (jj_2_50(3)) {
      jj_consume_token(T_NEXT_ENDS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_NEXT_ENDS, s);}
    } else if (jj_2_51(3)) {
      jj_consume_token(T_NEXT_CONTAINS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_NEXT_CONTAINS, s);}
    } else if (jj_2_52(3)) {
      jj_consume_token(T_PREV);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_PREV, x);}
    } else if (jj_2_53(3)) {
      jj_consume_token(T_PREV);
      {if (true) return new ASN.Directive(FrodoConstants.T_PREV);}
    } else if (jj_2_54(3)) {
      jj_consume_token(T_PREV_EMPTY);
      {if (true) return new ASN.Directive(FrodoConstants.T_PREV_EMPTY);}
    } else if (jj_2_55(3)) {
      jj_consume_token(T_PREV_STARTS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_PREV_STARTS, s);}
    } else if (jj_2_56(3)) {
      jj_consume_token(T_PREV_ENDS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_PREV_ENDS, s);}
    } else if (jj_2_57(3)) {
      jj_consume_token(T_PREV_CONTAINS);
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_PREV_CONTAINS, s);}
    } else if (jj_2_58(3)) {
      jj_consume_token(T_INSERT);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_INSERT, x);}
    } else if (jj_2_59(3)) {
      jj_consume_token(T_INSERT_AFTER);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_INSERT_AFTER, x);}
    } else if (jj_2_60(3)) {
      jj_consume_token(T_APPEND);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_APPEND, x);}
    } else if (jj_2_61(3)) {
      jj_consume_token(T_REMOVE);
      {if (true) return new ASN.Directive(FrodoConstants.T_REMOVE);}
    } else if (jj_2_62(3)) {
      jj_consume_token(T_REMOVE_RANGE);
      {if (true) return new ASN.Directive(FrodoConstants.T_REMOVE_RANGE);}
    } else if (jj_2_63(3)) {
      jj_consume_token(T_REPLACE);
      r = Regex();
      f = Format();
      {if (true) return new ASN.Directive(FrodoConstants.T_REPLACE, r, f);}
    } else if (jj_2_64(3)) {
      jj_consume_token(T_REPLACE);
      x = Constant();
      {if (true) return new ASN.Directive(FrodoConstants.T_REPLACE, x);}
    } else if (jj_2_65(3)) {
      jj_consume_token(T_REPLACE_ALL);
      r = Regex();
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_REPLACE_ALL, r, s);}
    } else if (jj_2_66(3)) {
      jj_consume_token(T_REPLACE_FIRST);
      r = Regex();
      s = String();
      {if (true) return new ASN.Directive(FrodoConstants.T_REPLACE_FIRST, r, s);}
    } else if (jj_2_67(3)) {
      jj_consume_token(T_CATENATE);
      {if (true) return new ASN.Directive(FrodoConstants.T_CATENATE);}
    } else if (jj_2_68(3)) {
      jj_consume_token(T_CATENATE);
      n = Integer();
      {if (true) return new ASN.Directive(FrodoConstants.T_CATENATE, n);}
    } else if (jj_2_69(3)) {
      jj_consume_token(T_MATCH);
      r = Regex();
      {if (true) return new ASN.Directive(FrodoConstants.T_MATCH, r);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(T_RANGE_CONTAINS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(T_RANGE_ENDS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(T_RANGE_STARTS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(T_RANGE_EMPTY)) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(T_RANGE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(T_RANGE_RESET)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(T_CONTAINS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(T_ENDS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(T_STARTS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(T_EQUALS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(T_EMPTY)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(T_RESET)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(T_FAIL)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(T_FAIL)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(T_LOG)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(T_ABORT)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(T_ABORT)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(T_ELSE)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(T_WHILE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(T_START)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(T_END)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(T_ID)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(T_FLOAT)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(T_ID)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(T_INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(T_ID)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(T_FORMAT)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(T_ID)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(T_REGEX)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(T_ID)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(T_STRING)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(T_ID)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(T_FLOAT)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(T_INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(T_FORMAT)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(T_REGEX)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(T_STRING)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(T_DEFINE)) return true;
    if (jj_scan_token(T_ID)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(T_FLOAT)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(T_INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(T_FORMAT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(T_REGEX)) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_scan_token(T_MATCH)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(T_STRING)) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(T_CATENATE)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_scan_token(T_CATENATE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(T_REPLACE_FIRST)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(T_REPLACE_ALL)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(T_REPLACE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(T_REPLACE)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(T_REMOVE_RANGE)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(T_REMOVE)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(T_APPEND)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(T_INSERT_AFTER)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(T_INSERT)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_scan_token(T_PREV_CONTAINS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(T_PREV_ENDS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(T_PREV_STARTS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_scan_token(T_PREV_EMPTY)) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(T_PREV)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(T_PREV)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(T_NEXT_CONTAINS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(T_NEXT_ENDS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(T_NEXT_STARTS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(T_NEXT_EMPTY)) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(T_NEXT)) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(T_NEXT)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(T_RANGE_ADJUST)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FrodoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[69];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Frodo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Frodo(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FrodoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Frodo(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FrodoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Frodo(FrodoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FrodoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 69; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
