/* Generated By:JavaCC: Do not edit this line. FrodoTokenManager.java */
package com.bpreece.lotr;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Token Manager. */
public class FrodoTokenManager implements FrodoConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000080000L) != 0L)
         {
            jjmatchedKind = 59;
            return 9;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 32;
         }
         if ((active0 & 0x178001fc10000L) != 0L)
         {
            jjmatchedKind = 59;
            return 46;
         }
         if ((active0 & 0x1e000000008400L) != 0L)
         {
            jjmatchedKind = 59;
            return 74;
         }
         if ((active0 & 0x120000L) != 0L)
         {
            jjmatchedKind = 59;
            return 100;
         }
         if ((active0 & 0x7800000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 24;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 59;
            return 40;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 59;
            return 82;
         }
         if ((active0 & 0x20L) != 0L)
            return 66;
         if ((active0 & 0x3c0000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 18;
         }
         return -1;
      case 1:
         if ((active0 & 0x7800000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 23;
         }
         if ((active0 & 0x1780000010000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 45;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 31;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 99;
         }
         if ((active0 & 0x3e00001fe28600L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 74;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 8;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 17;
         }
         return -1;
      case 2:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 44;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 30;
         }
         if ((active0 & 0x7800000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 22;
         }
         if ((active0 & 0x400L) != 0L)
            return 74;
         if ((active0 & 0x3970001fe38200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 74;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 7;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
            return 74;
         }
         return -1;
      case 3:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 6;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 43;
         }
         if ((active0 & 0x8000000100000L) != 0L)
            return 74;
         if ((active0 & 0x7800000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
            return 74;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
            return 74;
         }
         if ((active0 & 0x3170001fe38200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 74;
         }
         return -1;
      case 4:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1700000200000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 74;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 42;
         }
         if ((active0 & 0x3000001fc38200L) != 0L)
            return 74;
         if ((active0 & 0x7800000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 4;
            }
            return 74;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 28;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
            return 74;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 74;
         }
         if ((active0 & 0x1700000200000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 74;
         }
         if ((active0 & 0x80000L) != 0L)
            return 74;
         if ((active0 & 0x7800000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1700000000000L) != 0L)
            return 74;
         if ((active0 & 0x7800000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 6;
            }
            return 74;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
            return 74;
         if ((active0 & 0x7800000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x7800000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x3c0000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x5800000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2c0000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x5000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x280000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x120000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x7800000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c0000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x178001fc10000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000000080000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000001fc00000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1787800010000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000100000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000200400L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80003c0000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c0000000L);
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 74);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000008000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1fe00000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x700000020000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000010000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1fc00000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2700000008000L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 74);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000080200L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 74);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x7800220000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x3c0000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x7bc0000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000200000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 74);
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1f800000L);
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 74);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 74);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 74);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 74);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x1f800000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x704200000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x82940000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 74);
         return jjMoveStringLiteralDfa6_0(active0, 0x1080000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x90000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 74);
         return jjMoveStringLiteralDfa7_0(active0, 0x6600002800000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x840000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2100200000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4200000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x600000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x11080000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2108000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4202000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x840000000L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 74);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x480001000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x210000000000L);
      case 106:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1080000000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 32);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 37);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4a40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4200000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(9, 25);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x11084800000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 30);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(9, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4200000000L);
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(10, 46);
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(10, 31);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(10, 36);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(10, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(11, 43);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4200000000L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(11, 40);
         break;
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(11, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(12, 33);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(12, 38);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(12, 45);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(13, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 109;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  else if (curChar == 36)
                     jjAddStates(0, 1);
                  else if (curChar == 46)
                     jjCheckNAdd(72);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 41)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(67);
                  }
                  break;
               case 0:
                  if (curChar == 61 && kind > 8)
                     kind = 8;
                  break;
               case 11:
                  if (curChar == 40 && kind > 12)
                     kind = 12;
                  break;
               case 12:
                  if (curChar == 41 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if (curChar == 63 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if (curChar == 61 && kind > 18)
                     kind = 18;
                  break;
               case 15:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if (curChar == 60 && kind > 29)
                     kind = 29;
                  break;
               case 21:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 26:
                  if (curChar == 62 && kind > 34)
                     kind = 34;
                  break;
               case 27:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 48:
                  if (curChar == 35 && kind > 42)
                     kind = 42;
                  break;
               case 49:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
               case 53:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 51:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 54:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 55:
               case 58:
                  if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  break;
               case 56:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 59:
                  if (curChar == 47 && kind > 55)
                     kind = 55;
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(8, 10);
                  break;
               case 65:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar != 46)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (curChar == 46)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(72);
                  break;
               case 93:
                  if (curChar == 36)
                     jjAddStates(0, 1);
                  break;
               case 94:
                  if (curChar == 43 && kind > 11)
                     kind = 11;
                  break;
               case 95:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 36 && kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 116)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 116)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 118)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  if (curChar == 116)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(74);
                  }
                  else if (curChar == 124)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 34;
                  if (curChar == 101)
                     jjAddStates(11, 13);
                  else if (curChar == 100)
                     jjAddStates(14, 15);
                  else if (curChar == 99)
                     jjAddStates(16, 17);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 2:
                  if (curChar == 108 && kind > 11)
                     kind = 11;
                  break;
               case 3:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 19:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 25:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 94 && kind > 39)
                     kind = 39;
                  break;
               case 35:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 100 && kind > 41)
                     kind = 41;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 47:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 51:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 52:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x10004410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 57:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x10004410000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 60:
                  if (curChar == 124)
                     jjCheckNAddStates(8, 10);
                  break;
               case 61:
                  if ((0xefffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 62:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x1010004410000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 64:
                  if (curChar == 124 && kind > 56)
                     kind = 56;
                  break;
               case 73:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if (curChar == 99)
                     jjAddStates(16, 17);
                  break;
               case 76:
                  if (curChar == 101 && kind > 47)
                     kind = 47;
                  break;
               case 77:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 100)
                     jjAddStates(14, 15);
                  break;
               case 86:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 87:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 102 && kind > 8)
                     kind = 8;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 98:
                  if (curChar == 101)
                     jjAddStates(11, 13);
                  break;
               case 101:
                  if (curChar == 101 && kind > 14)
                     kind = 14;
                  break;
               case 102:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 115 && kind > 18)
                     kind = 18;
                  break;
               case 105:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 109 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   96, 97, 56, 57, 59, 51, 52, 54, 61, 62, 64, 100, 103, 108, 90, 92, 
   82, 84, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\141\142\157\162\164", 
"\154\157\147", null, null, null, null, "\167\150\151\154\145", "\162\145\163\145\164", 
"\145\155\160\164\171", null, "\163\164\141\162\164\163", "\145\156\144\163", 
"\143\157\156\164\141\151\156\163", "\162\141\156\147\145", "\162\141\156\147\145\55\145\155\160\164\171", 
"\162\141\156\147\145\55\163\164\141\162\164\163", "\162\141\156\147\145\55\145\156\144\163", 
"\162\141\156\147\145\55\143\157\156\164\141\151\156\163", "\162\141\156\147\145\55\141\144\152\165\163\164", 
"\162\141\156\147\145\55\162\145\163\145\164", null, "\160\162\145\166\55\145\155\160\164\171", 
"\160\162\145\166\55\163\164\141\162\164\163", "\160\162\145\166\55\145\156\144\163", 
"\160\162\145\166\55\143\157\156\164\141\151\156\163", null, "\156\145\170\164\55\145\155\160\164\171", 
"\156\145\170\164\55\163\164\141\162\164\163", "\156\145\170\164\55\145\156\144\163", 
"\156\145\170\164\55\143\157\156\164\141\151\156\163", null, "\151\156\163\145\162\164\55\141\146\164\145\162", null, null, 
"\162\145\155\157\166\145\55\162\141\156\147\145", "\162\145\160\154\141\143\145", 
"\162\145\160\154\141\143\145\55\146\151\162\163\164", "\162\145\160\154\141\143\145\55\141\154\154", null, 
"\162\145\167\162\151\164\145", "\164\157\55\154\157\167\145\162", "\164\157\55\165\160\160\145\162", 
"\164\162\151\155", "\155\141\164\143\150", "\163\160\154\151\164", null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INSIDE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[109];
static private final int[] jjstateSet = new int[218];
static protected char curChar;
/** Constructor. */
public FrodoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public FrodoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 109; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 7)
       {
          jjmatchedKind = 7;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
